Configuration
=============

.. _dispatcher: https://github.com/comodojo/dispatcher
.. _dispatcher-installer: https://github.com/comodojo/dispatcher-installer
.. _dispatcher.framework: https://github.com/comodojo/dispatcher.framework
.. _psr-3: http://www.php-fig.org/psr/psr-3/
.. _HTTP/1.1 methods: https://tools.ietf.org/html/rfc2616#section-9
.. _patch method: https://tools.ietf.org/html/rfc5789

Dispatcher can be configured basically in two ways:

1 Passing configuration directives as associative array when a new instance of dispatcher is created
2 Using a plugin hooked to DispatcherEvent

However, since the framework emits DispatcherEvent only when dispatch() method is invoked, some directives could be already read by core components. In such a way, with the second alternative a plugin may change the configuration that services will read under particular circumstances or even disable dispatcher.

When using `dispatcher-installer`_, automatically inited as YAML file (dispatcher-config.yml), converted to array at boot time. Initial parameters are taken from the extra->comodojo-configuration section of root package; if section is not defined, default parameters are used. The following is an example of a yaml file generated by `dispatcher-installer`_.

.. code-block:: yaml

    enabled: true
    encoding: UTF-8
    static-config: config
    routing-table-cache: true
    routing-table-ttl: 86400
    log:
        enabled: true
        name: dispatcher
        providers:
            local:
                type: StreamHandler
                level: debug
                target: logs/dispatcher.log
    cache:
        enabled: true
        algorithm: PICK_FIRST
        providers:
            local:
                type: FileCache
                folder: cache
    base-path: /var/www/dispatcher

It's important to understand that configuration only change the predefined dispatcher behaviour, but cannot add a route or define a event's hook. Take a look at routing or plugins sections to have more information.

.. note:: Following paragraphs will describe configuration parameters in YAML but, as has been said, these should be provided to framework as an associative array.

The configuration schema
************************

- enabled
- encoding
- static-config
- log
- cache
- base-path
- base-url
- base-uri
- disabled-status
- disabled-message
- routing-table-cache
- routing-table-ttl
- allowed-http-methods
- supported-http-methods

enabled
"""""""

Dispatcher on/off switch. When false, dispatcher stops to serve requests (maintenance mode)

encoding
""""""""

The character encoding to be used (default utf-8)

static-config
"""""""""""""

The (relative) path where static configuration files reside.


.. note:: This parameter is currently used by `dispatcher-installer`_ only.


log
"""

cache
"""""

base-path
"""""""""

base-url
""""""""

base-uri
""""""""

disabled-status
"""""""""""""""

The HTTP status that a disabled dispatcher should return (default 503 - Service Unavailable).

disabled-message
""""""""""""""""

The message that will be displayed as content of the response, if dispatcher disable (default 'Dispatcher offline').

routing-table-cache
"""""""""""""""""""

Enable or disable the routing table cache.

routing-table-ttl
"""""""""""""""""

Time-to-live for the routing table cache (default 24h)

allowed-http-methods
""""""""""""""""""""

Define the HTTP methods the framework should allow.

supported-http-methods
""""""""""""""""""""""

Array of supported HTTP methods.

By default, dispatcher supports all methods defined in `HTTP/1.1`_ specification plus the `patch method`_.

This directive could be used to restrict (or extend) the pool of supported methods.

.. note:: The difference between supported and allowed HTTP methods is that in the first case the framework will not consider a missing method implementable (even if implemented) and will then reply with a 501 - Not Implementend error; in the second case, a missing method will generate a 405 - Method not allowed reply.