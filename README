 ====================================
| Comodojo simpleDataRestDispatcher  |
 ====================================

@package	Comodojo Spare Parts
@author         comodojo.org
@copyright	2013 comodojo.org (info@comodojo.org)
@version	__CURRENT_VERSION__

ABOUT
=====

Comodojo simpleDataRestDispatcher 2.0 is a small framework designed to make it
easy to publish simple REST services starting from generic data sources (local
files, remote files, database, ...).

Framework supports natively HTTP GET, POST, PUT, DELETE, but can be hacked to
work with other methods (see "HACKING FRAMEWORK" section).

Framework core is derived from Comodojo Core, and use the same structure of
comodojo kernel. Also XML and JSON encoder/decoder are the same.

Main framework configuration is contained in configs/main-config.php file.

Each service consists of two different files: the first (located in configs
folder) contains basic configuration parameters (i.e. service name, debug, ...);
second is the real service logic (in services folder). Files could be merged into
one (that mean that config could be hardcoded in service logic).

In addition, framework comes with a small URL router (index.php located in root
folder) that can centralize requests to different services redirecting to them
or masquerading results in agreement to what declared in routing table
(contained in configs/router-config.php). It can also route/cloak requests to
services not declared in routing table (autoroute) if present in services
folder.

Comodojo simpleDataRestDispatcher is distributed in two flavours:
 - package version: complete version, needs installation
 - base class version: single file (self-contained service), doesn't needs
   installation

NEW IN 2.0
==========

- Bugfixing & optimization
- GET,PUT,POST,DELETE Methods support
- HTTP status codes support
- HTTP Active Access-Control-Allow-Origin support
- HTTP Allowed/Implemented method active check
- HTTP method overriding/transformation in router
- new CURL based tests
- CORS now supports multiple domains list (comma separated)
- Support for PostgreSQL

NEW IN 1.1
==========

- Bugfixing & optimization
- Server and client cache support in router
- Correct encoding in XML output (via constant DEFAULT_ENCODING)
- Client cache support in services

VERSION FEATURES
================

-----------------------------------------------
 FEATURE                 PACKAGE     BASE_CLASS
-----------------------------------------------
XML encode/decode           Y            Y
JSON encode/decode          Y            Y
Multiple DB support         Y            Y
serverside httpGET          Y            Y
Single service/file         N            Y
Multiple services           Y            N
Debug support               Y            Y
Trace support               Y            N
Log/statistics support      Y            N
URL routing/cloaking        Y            N
Server caching              Y            N
Client caching              Y            Y
Status code customization   Y		 Y
GET/PUT/POST/DELETE supp.   Y		 Y
CORS-Allow-Origin	    Y            Y
Req. method transformation  Y		 N

INSTALLATION
============

Package version needs installation, that takes less than 1 minute and
consists of:
 - (optional) create a database and user with grant on it
 - create comodojo_statistics table, where logs will be stored (you can find
   prebuilt mysql query in others/base_db.sql)
 - configure parameters in main-config.php and router-config.php located in
   configs folder (see next section for parameter explanation)
 - (optional) create example database tables and fill it with example values
   (you can find prebuilt mysql query in others/base_db.sql)
 - (optional) run tests in test folder to check requirements and see that
   everything works :)


CONFIGURATION PARAMETERS
========================

Please refer to single files for parameters explanation:
 - main-config.php
 - router-config.php

USAGE
=====

Defining a service is quite easy.

First, you should create a service config file that should include:

------------------------CODE------------------------
$service_config = Array(

	"serviceName"   		=> "example_service",
        
	"serviceActive"			=> true,
        
	"isDebug"			=> true,
        
	"isTrace"			=> true,
        
	"logFile"			=> "example_service.log",
	
	"ttl"				=> -1
        
	"accessControlAllowOrigin"	=> "comodojo.org"
);

$service_required_parameters = Array("p");
------------------------CODE------------------------

> $service_config parameters explanation:

- serviceName (STRING): It's the full service name

- serviceActive (BOOL): if true, service will process requests, if false will return
  a "service closed" message (formatted according to current transport)

- isDebug (BOOL): if true, service will debug directly in php error.log

- isTrace (BOOL): if true, service requests/response will be traced in specified log
  file (see below)

- logFile (STRING): name of the relative log file. If false and trace enabled, service
  will log in default $logFile="global.log"

- ttl (INTEGER): control client-side caching; valid parameters are:
  * -1 : no cache, no header sent to client
  *  0 : no cache, header sent to client (cache control, expires, max-age)
  * INT: cache on for (INT) seconds via header sent to clients

- accessControlAllowOrigin (STRING): define valid origin in CORS requests

> $service_required_parameters: an array of values that should be included in the
  request, no matter the HTTP method; framework will check those values and, if
  one or more or them are undefined, returns a 400 Bad-Request result.

Then, you should create service file (in services folder) that contains the
service logic, using simple HTTP method pointer ($this->get, $this->put, ...).

Also, if you don't need to specify method or simply you want some more flexible,
customized logic, you can use the "logic" method, invoked on each request, no matter
the type.

You can copy the file structure from examples and:

 - include right service configuration file
 - write the service logic (that's the most important part) according to your needs
 
Service logic methods should not return any value BUT HAVE TO POPULATE two class
variables:

 - $this->success  (bool)                           service end status
 - $this->result   (string|array|numeric|bool|...)  service result 

A NOTE ON CACHING
=================

SimpleDataRestDispatcher support two levels caching when request are via GET method:

 - services-side: single service can, if specified, send cache header info to
   clients
 - router-side: router can cache requests in temp files, send cache header info
   to clients or both

Having said this, router can ensure best performances but first request can be
heavy to process and in addition embedded curl http call is real slow.
In the other hand, client caching is free but lots client in short unit of time
will produce heavy traffic and lots service processing cicle.

That's mean that, if you need this feature, server caching (with or without
client cache) is recomended for services with lot requests or few changes
during day (long ttl); client cache is suggested in any condition but for
services with lots of changes in short unit of time.

A NOTE ON ACCESS CONTROL
========================

CORS access control is a bit tricky; current dispatcher implements only the
Access-Control-Allow-Origin header and check the HTTP-ORIGIN to handle requests.

That mean:

- if access-control value = "*", framework will return header = "*" for each
  request
- if access-control value = "some.domain", framework will check request HTTP ORIGIN
  header and return a 403 Origin-not-allowed response in case of mismatch or a 200 OK
  response containing access-control header
- if access-control value is a list of domains, comma separated, framework will explode
  values and match just like previous point
- if access-control value = false, access control logic will be completely disabled

Anyway, default value is "*"; it don't modify service behaviour and simply permit CORS
requests.

HACKING FRAMEWORK
=================

(t.b.w.)

EXAMPLE SERVICES
================

All example service are located in services folder.

 - example_hello_world.php: simple hello-world service; it expects in input "to"
   parameter and replies greeting it; there are different implementation of this
   example to show framework capabilities.
 - example_database_based_service.php: output values from example table in
   database; no input parameter expected.
 - example_internal_service.php: output local file (text_1 or text_2 located in
   others folder) according to numeric input parameter "text".
 - example_external_service.php: output lorem ipsum text from loripsum.net;
   expects "p" input parameters used to set number of patagraphs to generate.

TESTS
=====

All tests are located in test folder.

 - test_php_functions.php: tells you if your php installation are compliant
   to functions and extensions required by framework.
 - test_services.html: tests single services directly with http xhr requests (use
   dojotoolkit).
 - test_router.html: tests single services via url router and with http xhr
   requests (use dojotookit)
 - test_performance.html: router performance and caching test (use dojotookit)
 
There are also new version of tests (.php instead of .html), still uncompleted.

LICENSE
=======

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.